/* BEGIN_HEADER */
#include "lmots.h"
#include "mbedtls/lms.h"

#include "mbedtls/entropy.h"
#include "mbedtls/ctr_drbg.h"

/* END_HEADER */

/* BEGIN_DEPENDENCIES
 * depends_on:MBEDTLS_LMS_C:MBEDTLS_PSA_CRYPTO_C:MBEDTLS_CTR_DRBG_C
 * END_DEPENDENCIES
 */

/* BEGIN_CASE */
void lmots_sign_verify_test ( data_t * msg )
{
    mbedtls_lmots_context ctx;
    unsigned char sig[MBEDTLS_LMOTS_SIG_LEN];
    mbedtls_entropy_context entropy_ctx;
    mbedtls_ctr_drbg_context drbg_ctx;
    uint8_t seed[16];

    mbedtls_entropy_init( &entropy_ctx );
    mbedtls_ctr_drbg_init( &drbg_ctx );
    mbedtls_lmots_init( &ctx );

    TEST_ASSERT( mbedtls_ctr_drbg_seed( &drbg_ctx, mbedtls_entropy_func,
                 &entropy_ctx, (uint8_t*)"", 0 ) == 0 );
    TEST_ASSERT( mbedtls_ctr_drbg_random( &drbg_ctx, seed, sizeof( seed ) ) == 0 );

    TEST_ASSERT( mbedtls_lmots_set_algorithm_type(&ctx, MBEDTLS_LMOTS_SHA256_N32_W8) == 0 );
    TEST_ASSERT( mbedtls_lmots_gen_privkey(&ctx, (uint8_t[16]){0}, 0x12, seed, sizeof( seed ) ) == 0 );
    TEST_ASSERT( mbedtls_lmots_gen_pubkey(&ctx) == 0 );
    TEST_ASSERT( mbedtls_lmots_sign(&ctx, mbedtls_ctr_drbg_random, &drbg_ctx, msg->x, msg->len, sig ) == 0 );
    TEST_ASSERT( mbedtls_lmots_verify(&ctx, msg->x, msg->len, sig) == 0 );

exit:
    mbedtls_entropy_free( &entropy_ctx );
    mbedtls_ctr_drbg_free( &drbg_ctx );
    mbedtls_lmots_free( &ctx );
}
/* END_CASE */

/* BEGIN_CASE */
void lmots_verify_test ( data_t * msg, data_t * sig, data_t * pub_key,
                          int expected_rc )
{
    mbedtls_lmots_context ctx;

    mbedtls_lmots_init( &ctx );

    mbedtls_lmots_import_pubkey( &ctx, pub_key->x );

    TEST_ASSERT(mbedtls_lmots_verify( &ctx, msg->x, msg->len, sig->x ) == expected_rc );

exit:
    mbedtls_lmots_free( &ctx );
}
/* END_CASE */

/* BEGIN_CASE */
void lmots_import_export_test (  data_t * pub_key )
{
    mbedtls_lmots_context ctx;
    uint8_t exported_pub_key[MBEDTLS_LMOTS_PUBKEY_LEN];

    mbedtls_lmots_init( &ctx );
    TEST_ASSERT( mbedtls_lmots_import_pubkey( &ctx, pub_key->x ) == 0 );
    TEST_ASSERT( mbedtls_lmots_export_pubkey( &ctx, exported_pub_key ) == 0 );

    TEST_ASSERT( memcmp( pub_key->x, exported_pub_key, MBEDTLS_LMOTS_PUBKEY_LEN ) == 0 );

exit:
    mbedtls_lmots_free( &ctx );
}
/* END_CASE */

/* BEGIN_CASE */
void lmots_reuse_test ( data_t * msg )
{
    mbedtls_lmots_context ctx;
    unsigned char sig[MBEDTLS_LMOTS_SIG_LEN];
    mbedtls_entropy_context entropy_ctx;
    mbedtls_ctr_drbg_context drbg_ctx;
    uint8_t seed[16];

    mbedtls_entropy_init( &entropy_ctx );
    mbedtls_ctr_drbg_init( &drbg_ctx );
    TEST_ASSERT( mbedtls_ctr_drbg_seed(&drbg_ctx, mbedtls_entropy_func,
                 &entropy_ctx, (uint8_t*)"", 0 ) == 0 );

    mbedtls_ctr_drbg_random( &drbg_ctx, seed, sizeof( seed ) );

    mbedtls_lmots_init( &ctx );
    TEST_ASSERT( mbedtls_lmots_set_algorithm_type( &ctx, MBEDTLS_LMOTS_SHA256_N32_W8 ) == 0 );
    TEST_ASSERT( mbedtls_lmots_gen_privkey(&ctx, (uint8_t[16]){0}, 0x12, seed, sizeof( seed ) ) == 0 );
    TEST_ASSERT( mbedtls_lmots_sign(&ctx, mbedtls_ctr_drbg_random, &drbg_ctx, msg->x, msg->len, sig ) == 0 );

    /* Running another sign operation should fail, since the key should now have
     * been erased.
     */
    TEST_ASSERT( mbedtls_lmots_sign(&ctx, mbedtls_ctr_drbg_random, &drbg_ctx, msg->x, msg->len, sig ) != 0 );

exit:
    mbedtls_entropy_free( &entropy_ctx );
    mbedtls_ctr_drbg_free( &drbg_ctx );
    mbedtls_lmots_free( &ctx );
}
/* END_CASE */
